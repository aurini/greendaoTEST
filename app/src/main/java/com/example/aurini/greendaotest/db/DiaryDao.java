package com.example.aurini.greendaotest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIARY".
*/
public class DiaryDao extends AbstractDao<Diary, Long> {

    public static final String TABLENAME = "DIARY";

    /**
     * Properties of entity Diary.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Id_server = new Property(1, Long.class, "id_server", false, "ID_SERVER");
        public final static Property User_id = new Property(2, String.class, "user_id", false, "USER_ID");
        public final static Property Note = new Property(3, String.class, "note", false, "NOTE");
        public final static Property Rg0 = new Property(4, Boolean.class, "rg0", false, "RG0");
        public final static Property Rg1 = new Property(5, Boolean.class, "rg1", false, "RG1");
        public final static Property Rg2 = new Property(6, Boolean.class, "rg2", false, "RG2");
        public final static Property Rg3 = new Property(7, Boolean.class, "rg3", false, "RG3");
        public final static Property Rg4 = new Property(8, Boolean.class, "rg4", false, "RG4");
        public final static Property Rg5 = new Property(9, Boolean.class, "rg5", false, "RG5");
        public final static Property Rg6 = new Property(10, Boolean.class, "rg6", false, "RG6");
        public final static Property Rg7 = new Property(11, Boolean.class, "rg7", false, "RG7");
        public final static Property Rg8 = new Property(12, Boolean.class, "rg8", false, "RG8");
        public final static Property Rg9 = new Property(13, Boolean.class, "rg9", false, "RG9");
        public final static Property  PhotoPath = new Property(14, String.class, " photoPath", false, " PHOTO_PATH");
        public final static Property PhotoLink = new Property(15, String.class, "photoLink", false, "PHOTO_LINK");
        public final static Property Date = new Property(16, java.util.Date.class, "date", false, "DATE");
        public final static Property IsSync = new Property(17, Boolean.class, "isSync", false, "IS_SYNC");
    }


    public DiaryDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIARY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_SERVER\" INTEGER," + // 1: id_server
                "\"USER_ID\" TEXT," + // 2: user_id
                "\"NOTE\" TEXT," + // 3: note
                "\"RG0\" INTEGER," + // 4: rg0
                "\"RG1\" INTEGER," + // 5: rg1
                "\"RG2\" INTEGER," + // 6: rg2
                "\"RG3\" INTEGER," + // 7: rg3
                "\"RG4\" INTEGER," + // 8: rg4
                "\"RG5\" INTEGER," + // 9: rg5
                "\"RG6\" INTEGER," + // 10: rg6
                "\"RG7\" INTEGER," + // 11: rg7
                "\"RG8\" INTEGER," + // 12: rg8
                "\"RG9\" INTEGER," + // 13: rg9
                "\" PHOTO_PATH\" TEXT," + // 14:  photoPath
                "\"PHOTO_LINK\" TEXT," + // 15: photoLink
                "\"DATE\" INTEGER," + // 16: date
                "\"IS_SYNC\" INTEGER);"); // 17: isSync
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIARY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Diary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_server = entity.getId_server();
        if (id_server != null) {
            stmt.bindLong(2, id_server);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
 
        Boolean rg0 = entity.getRg0();
        if (rg0 != null) {
            stmt.bindLong(5, rg0 ? 1L: 0L);
        }
 
        Boolean rg1 = entity.getRg1();
        if (rg1 != null) {
            stmt.bindLong(6, rg1 ? 1L: 0L);
        }
 
        Boolean rg2 = entity.getRg2();
        if (rg2 != null) {
            stmt.bindLong(7, rg2 ? 1L: 0L);
        }
 
        Boolean rg3 = entity.getRg3();
        if (rg3 != null) {
            stmt.bindLong(8, rg3 ? 1L: 0L);
        }
 
        Boolean rg4 = entity.getRg4();
        if (rg4 != null) {
            stmt.bindLong(9, rg4 ? 1L: 0L);
        }
 
        Boolean rg5 = entity.getRg5();
        if (rg5 != null) {
            stmt.bindLong(10, rg5 ? 1L: 0L);
        }
 
        Boolean rg6 = entity.getRg6();
        if (rg6 != null) {
            stmt.bindLong(11, rg6 ? 1L: 0L);
        }
 
        Boolean rg7 = entity.getRg7();
        if (rg7 != null) {
            stmt.bindLong(12, rg7 ? 1L: 0L);
        }
 
        Boolean rg8 = entity.getRg8();
        if (rg8 != null) {
            stmt.bindLong(13, rg8 ? 1L: 0L);
        }
 
        Boolean rg9 = entity.getRg9();
        if (rg9 != null) {
            stmt.bindLong(14, rg9 ? 1L: 0L);
        }
 
        String  photoPath = entity.get PhotoPath();
        if ( photoPath != null) {
            stmt.bindString(15,  photoPath);
        }
 
        String photoLink = entity.getPhotoLink();
        if (photoLink != null) {
            stmt.bindString(16, photoLink);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(17, date.getTime());
        }
 
        Boolean isSync = entity.getIsSync();
        if (isSync != null) {
            stmt.bindLong(18, isSync ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Diary entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_server = entity.getId_server();
        if (id_server != null) {
            stmt.bindLong(2, id_server);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(3, user_id);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(4, note);
        }
 
        Boolean rg0 = entity.getRg0();
        if (rg0 != null) {
            stmt.bindLong(5, rg0 ? 1L: 0L);
        }
 
        Boolean rg1 = entity.getRg1();
        if (rg1 != null) {
            stmt.bindLong(6, rg1 ? 1L: 0L);
        }
 
        Boolean rg2 = entity.getRg2();
        if (rg2 != null) {
            stmt.bindLong(7, rg2 ? 1L: 0L);
        }
 
        Boolean rg3 = entity.getRg3();
        if (rg3 != null) {
            stmt.bindLong(8, rg3 ? 1L: 0L);
        }
 
        Boolean rg4 = entity.getRg4();
        if (rg4 != null) {
            stmt.bindLong(9, rg4 ? 1L: 0L);
        }
 
        Boolean rg5 = entity.getRg5();
        if (rg5 != null) {
            stmt.bindLong(10, rg5 ? 1L: 0L);
        }
 
        Boolean rg6 = entity.getRg6();
        if (rg6 != null) {
            stmt.bindLong(11, rg6 ? 1L: 0L);
        }
 
        Boolean rg7 = entity.getRg7();
        if (rg7 != null) {
            stmt.bindLong(12, rg7 ? 1L: 0L);
        }
 
        Boolean rg8 = entity.getRg8();
        if (rg8 != null) {
            stmt.bindLong(13, rg8 ? 1L: 0L);
        }
 
        Boolean rg9 = entity.getRg9();
        if (rg9 != null) {
            stmt.bindLong(14, rg9 ? 1L: 0L);
        }
 
        String  photoPath = entity.get PhotoPath();
        if ( photoPath != null) {
            stmt.bindString(15,  photoPath);
        }
 
        String photoLink = entity.getPhotoLink();
        if (photoLink != null) {
            stmt.bindString(16, photoLink);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(17, date.getTime());
        }
 
        Boolean isSync = entity.getIsSync();
        if (isSync != null) {
            stmt.bindLong(18, isSync ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Diary readEntity(Cursor cursor, int offset) {
        Diary entity = new Diary( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_server
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // note
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // rg0
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // rg1
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // rg2
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // rg3
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // rg4
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // rg5
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // rg6
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // rg7
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // rg8
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // rg9
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), //  photoPath
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // photoLink
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // date
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0 // isSync
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Diary entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_server(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUser_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRg0(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setRg1(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setRg2(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setRg3(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setRg4(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setRg5(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setRg6(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setRg7(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setRg8(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setRg9(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.set PhotoPath(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPhotoLink(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDate(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setIsSync(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Diary entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Diary entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Diary entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
