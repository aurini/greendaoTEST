package com.example.aurini.greendaotest.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOOD__CATEGORY".
*/
public class Food_CategoryDao extends AbstractDao<Food_Category, Void> {

    public static final String TABLENAME = "FOOD__CATEGORY";

    /**
     * Properties of entity Food_Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", false, "ID");
        public final static Property Id_server = new Property(1, Long.class, "id_server", false, "ID_SERVER");
        public final static Property Food_category_name = new Property(2, String.class, "food_category_name", false, "FOOD_CATEGORY_NAME");
        public final static Property Header_open = new Property(3, Boolean.class, "header_open", false, "HEADER_OPEN");
    }


    public Food_CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public Food_CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOOD__CATEGORY\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"ID_SERVER\" INTEGER," + // 1: id_server
                "\"FOOD_CATEGORY_NAME\" TEXT," + // 2: food_category_name
                "\"HEADER_OPEN\" INTEGER);"); // 3: header_open
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOOD__CATEGORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Food_Category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_server = entity.getId_server();
        if (id_server != null) {
            stmt.bindLong(2, id_server);
        }
 
        String food_category_name = entity.getFood_category_name();
        if (food_category_name != null) {
            stmt.bindString(3, food_category_name);
        }
 
        Boolean header_open = entity.getHeader_open();
        if (header_open != null) {
            stmt.bindLong(4, header_open ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Food_Category entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long id_server = entity.getId_server();
        if (id_server != null) {
            stmt.bindLong(2, id_server);
        }
 
        String food_category_name = entity.getFood_category_name();
        if (food_category_name != null) {
            stmt.bindString(3, food_category_name);
        }
 
        Boolean header_open = entity.getHeader_open();
        if (header_open != null) {
            stmt.bindLong(4, header_open ? 1L: 0L);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Food_Category readEntity(Cursor cursor, int offset) {
        Food_Category entity = new Food_Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id_server
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // food_category_name
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // header_open
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Food_Category entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId_server(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFood_category_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeader_open(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Food_Category entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Food_Category entity) {
        return null;
    }

    @Override
    public boolean hasKey(Food_Category entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
